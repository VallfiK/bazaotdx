// internal/app/styled_app.go
package app

import (
	"fmt"
	"log"
	"strconv"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/service"
	"github.com/VallfIK/bazaotdx/internal/ui"
)

// StyledGuestApp ‚Äî —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á—ë—Ç–∞ –≥–æ—Å—Ç–µ–π
type StyledGuestApp struct {
	app                   fyne.App
	window                fyne.Window
	guestService          *service.GuestService
	cottageService        *service.CottageService
	tariffService         *service.TariffService
	bookingService        *service.BookingService
	updateCottagesContent func()
	cottages              []models.Cottage

	// UI –≤–∏–¥–∂–µ—Ç—ã
	calendarWidget    *ui.BookingCalendar
	bookingListWidget *ui.BookingListWidget
}

// NewStyledGuestApp —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func NewStyledGuestApp(
	guestService *service.GuestService,
	cottageService *service.CottageService,
	tariffService *service.TariffService,
	bookingService *service.BookingService,
) *StyledGuestApp {
	a := app.New()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
	a.Settings().SetTheme(&ui.ForestTheme{})

	w := a.NewWindow("üå≤ –õ–µ—Å–Ω–∞—è –ë–∞–∑–∞ –û—Ç–¥—ã—Ö–∞ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
	w.Resize(fyne.NewSize(1600, 900))
	w.CenterOnScreen()

	app := &StyledGuestApp{
		app:            a,
		window:         w,
		guestService:   guestService,
		cottageService: cottageService,
		tariffService:  tariffService,
		bookingService: bookingService,
	}

	// Load cottages
	var err error
	app.cottages, err = app.cottageService.GetAllCottages()
	if err != nil {
		log.Printf("Error loading cottages: %v", err)
	}

	return app
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (a *StyledGuestApp) Run() {
	a.createStyledUI()
	a.window.ShowAndRun()
}

// createStyledUI —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (a *StyledGuestApp) createStyledUI() {
	// –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
	topBar := a.createTopBar()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥–∂–µ—Ç
	a.calendarWidget = ui.NewBookingCalendar(
		a.bookingService,
		a.cottageService,
		a.tariffService,
		a.window,
	)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	a.bookingListWidget = ui.NewBookingListWidget(
		a.bookingService,
		a.cottageService,
		a.window,
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∑–∞–∏–º–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	a.calendarWidget.SetOnRefresh(func() {
		a.bookingListWidget.Refresh()
	})

	a.bookingListWidget.SetOnRefresh(func() {
		a.calendarWidget.Update()
	})

	// –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
	sidePanel := a.createSidePanel()

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
	mainContent := a.createMainContent()

	// –ö–æ–º–ø–æ–Ω—É–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
	content := container.NewBorder(
		topBar,
		nil,
		sidePanel,
		nil,
		mainContent,
	)

	a.window.SetContent(content)
}

// createTopBar —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
func (a *StyledGuestApp) createTopBar() fyne.CanvasObject {
	// –§–æ–Ω –ø–∞–Ω–µ–ª–∏
	bg := canvas.NewRectangle(ui.DarkForestGreen)
	bg.SetMinSize(fyne.NewSize(0, 80))

	// –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
	title := canvas.NewText("üå≤ –õ–µ—Å–Ω–∞—è –ë–∞–∑–∞ –û—Ç–¥—ã—Ö–∞", ui.Cream)
	title.TextSize = 28
	title.TextStyle = fyne.TextStyle{Bold: true}

	subtitle := canvas.NewText("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º", ui.LightCream)
	subtitle.TextSize = 14

	titleContainer := container.NewVBox(
		title,
		subtitle,
	)

	// –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
	timeLabel := canvas.NewText("", ui.Cream)
	timeLabel.TextSize = 16
	updateTime := func() {
		now := time.Now()
		timeLabel.Text = now.Format("15:04:05\n02.01.2006")
		timeLabel.Refresh()
	}
	updateTime()
	go func() {
		for range time.Tick(1 * time.Second) {
			updateTime()
		}
	}()

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	userInfo := container.NewVBox(
		canvas.NewText("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", ui.Cream),
		widget.NewButtonWithIcon("–í—ã—Ö–æ–¥", theme.LogoutIcon(), func() {
			dialog.ShowConfirm("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
				func(ok bool) {
					if ok {
						a.window.Close()
					}
				}, a.window)
		}),
	)

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
	content := container.NewBorder(
		nil, nil,
		container.NewPadded(titleContainer),
		container.NewHBox(
			container.NewPadded(timeLabel),
			widget.NewSeparator(),
			container.NewPadded(userInfo),
		),
		nil,
	)

	return container.NewMax(bg, content)
}

// createSidePanel —Å–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
func (a *StyledGuestApp) createSidePanel() fyne.CanvasObject {
	// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	statsCards := container.NewVBox()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	updateStats := func() {
		statsCards.Objects = nil

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		cottages, _ := a.cottageService.GetAllCottages()
		freeCottages := 0
		for _, c := range cottages {
			if c.Status == "free" {
				freeCottages++
			}
		}

		// –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤
		freeCard := ui.InfoCard(
			theme.HomeIcon(),
			"–°–≤–æ–±–æ–¥–Ω–æ –¥–æ–º–∏–∫–æ–≤",
			fmt.Sprintf("%d –∏–∑ %d", freeCottages, len(cottages)),
			ui.ForestGreen,
		)
		freeCard.Resize(fyne.NewSize(250, 100))

		// –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
		now := time.Now()
		monthStart := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.Local)
		monthEnd := monthStart.AddDate(0, 1, -1)

		bookings, _ := a.bookingService.GetBookingsByDateRange(monthStart, monthEnd)
		activeBookings := 0
		totalRevenue := float64(0)

		for _, b := range bookings {
			if b.Status != models.BookingStatusCancelled {
				activeBookings++
				totalRevenue += b.TotalCost
			}
		}

		bookingCard := ui.InfoCard(
			theme.DocumentIcon(),
			"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –º–µ—Å—è—Ü–µ",
			fmt.Sprintf("%d", activeBookings),
			ui.WoodBrown,
		)
		bookingCard.Resize(fyne.NewSize(250, 100))

		revenueCard := ui.InfoCard(
			theme.ContentCopyIcon(),
			"–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü",
			fmt.Sprintf("%.0f ‚ÇΩ", totalRevenue),
			ui.DarkForestGreen,
		)
		revenueCard.Resize(fyne.NewSize(250, 100))

		statsCards.Add(freeCard)
		statsCards.Add(bookingCard)
		statsCards.Add(revenueCard)
		statsCards.Refresh()
	}

	updateStats()

	// –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	quickActions := container.NewVBox(
		widget.NewCard("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "", container.NewVBox(
			ui.NewGradientButton("‚ûï –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", func() {
				a.showQuickBookingDialog()
			}),
			widget.NewButton("üìä –û—Ç—á–µ—Ç—ã", func() {
				a.showReportsDialog()
			}),
			widget.NewButton("üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∏–∫–∞–º–∏", func() {
				a.showCottagesDialog()
			}),
			widget.NewButton("üí∞ –¢–∞—Ä–∏—Ñ—ã", func() {
				a.showTariffsDialog()
			}),
		)),
	)

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	go func() {
		for range time.Tick(30 * time.Second) {
			updateStats()
		}
	}()

	panel := container.NewVBox(
		widget.NewCard("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "", statsCards),
		widget.NewSeparator(),
		quickActions,
	)

	// –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –ø–∞–Ω–µ–ª—å
	scroll := container.NewVScroll(panel)
	scroll.SetMinSize(fyne.NewSize(280, 0))

	// –§–æ–Ω –ø–∞–Ω–µ–ª–∏
	bg := canvas.NewRectangle(ui.Beige)

	return container.NewMax(bg, container.NewPadded(scroll))
}

// createMainContent —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
func (a *StyledGuestApp) createMainContent() fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º
	calendarTab := container.NewTabItemWithIcon(
		"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π",
		theme.ViewFullScreenIcon(),
		container.NewHSplit(a.calendarWidget, a.bookingListWidget),
	)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
	if split, ok := calendarTab.Content.(*container.Split); ok {
		split.SetOffset(0.75)
	}

	tabs := container.NewAppTabs(calendarTab)

	return tabs
}

// showQuickBookingDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (a *StyledGuestApp) showQuickBookingDialog() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤
	cottages, err := a.cottageService.GetFreeCottages()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(cottages) == 0 {
		dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤", a.window)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	tariffs, err := a.tariffService.GetTariffs()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
	nameEntry := ui.StyledEntry("–§–ò–û –≥–æ—Å—Ç—è")
	phoneEntry := ui.StyledEntry("+7 (999) 123-45-67")
	emailEntry := ui.StyledEntry("email@example.com")

	cottageOptions := make([]string, len(cottages))
	for i, c := range cottages {
		cottageOptions[i] = fmt.Sprintf("%d. %s", c.ID, c.Name)
	}
	cottageSelect := widget.NewSelect(cottageOptions, nil)

	tariffOptions := make([]string, len(tariffs))
	for i, t := range tariffs {
		tariffOptions[i] = fmt.Sprintf("%s - %.2f ‚ÇΩ/—Å—É—Ç–∫–∏", t.Name, t.PricePerDay)
	}
	tariffSelect := widget.NewSelect(tariffOptions, nil)

	// –î–∞—Ç—ã
	checkInDate := time.Now().Add(24 * time.Hour)
	checkOutDate := checkInDate.Add(24 * time.Hour)

	checkInPicker := ui.NewDatePickerButton("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkInDate = t
	})
	checkInPicker.SetSelectedDate(checkInDate)

	checkOutPicker := ui.NewDatePickerButton("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkOutDate = t
	})
	checkOutPicker.SetSelectedDate(checkOutDate)

	notesEntry := widget.NewMultiLineEntry()
	notesEntry.SetPlaceHolder("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è...")
	notesEntry.SetMinRowsVisible(3)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–§–ò–û –≥–æ—Å—Ç—è", Widget: nameEntry},
			{Text: "–¢–µ–ª–µ—Ñ–æ–Ω", Widget: phoneEntry},
			{Text: "Email", Widget: emailEntry},
			{Text: "–î–æ–º–∏–∫", Widget: cottageSelect},
			{Text: "–¢–∞—Ä–∏—Ñ", Widget: tariffSelect},
			{Text: "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", Widget: checkInPicker.button},
			{Text: "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", Widget: checkOutPicker.button},
			{Text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", Widget: notesEntry},
		},
		OnSubmit: func() {
			// –í–∞–ª–∏–¥–∞—Ü–∏—è
			if nameEntry.Text == "" || phoneEntry.Text == "" ||
				cottageSelect.SelectedIndex() < 0 || tariffSelect.SelectedIndex() < 0 {
				dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"), a.window)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
			booking := models.Booking{
				CottageID:    cottages[cottageSelect.SelectedIndex()].ID,
				GuestName:    nameEntry.Text,
				Phone:        phoneEntry.Text,
				Email:        emailEntry.Text,
				CheckInDate:  checkInPicker.GetSelectedDate(),
				CheckOutDate: checkOutPicker.GetSelectedDate(),
				TariffID:     tariffs[tariffSelect.SelectedIndex()].ID,
				Notes:        notesEntry.Text,
			}

			_, err := a.bookingService.CreateBooking(booking)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			a.calendarWidget.Update()
			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", a.window)
		},
		OnCancel: func() {},
	}

	d := dialog.NewCustom("–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 600))
	d.Show()
}

// showReportsDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –æ—Ç—á–µ—Ç–∞–º–∏
func (a *StyledGuestApp) showReportsDialog() {
	content := container.NewVBox(
		widget.NewCard("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "", container.NewVBox(
			widget.NewButton("üìä –û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
			widget.NewButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
			widget.NewButton("üìÖ –û—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
		)),
	)

	d := dialog.NewCustom("–û—Ç—á–µ—Ç—ã", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(400, 300))
	d.Show()
}

// showCottagesDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∏–∫–∞–º–∏
func (a *StyledGuestApp) showCottagesDialog() {
	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–∏–∫–æ–≤
	cottages, _ := a.cottageService.GetAllCottages()

	list := widget.NewList(
		func() int { return len(cottages) },
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–î–æ–º–∏–∫"),
				widget.NewLabel("–°—Ç–∞—Ç—É—Å"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			cottage := cottages[id]
			box := item.(*fyne.Container)

			box.Objects[0].(*widget.Label).SetText(fmt.Sprintf("%d. %s", cottage.ID, cottage.Name))

			status := "–°–≤–æ–±–æ–¥–µ–Ω"
			if cottage.Status == "occupied" {
				status = "–ó–∞–Ω—è—Ç"
			}
			box.Objects[1].(*widget.Label).SetText(status)

			box.Objects[2].(*widget.Button).OnTapped = func() {
				a.showEditCottageDialog(cottage)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞")

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		err := a.cottageService.AddCottage(nameEntry.Text)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", a.window)
		cottages, _ = a.cottageService.GetAllCottages()
		list.Refresh()
		a.calendarWidget.Update()
	})

	content := container.NewBorder(
		widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", "",
			container.NewBorder(nil, nil, nil, addBtn, nameEntry),
		),
		nil, nil, nil,
		list,
	)

	d := dialog.NewCustom("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∏–∫–∞–º–∏", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(600, 500))
	d.Show()
}

// showEditCottageDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∏–∫–∞
func (a *StyledGuestApp) showEditCottageDialog(cottage models.Cottage) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(cottage.Name)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "ID", Widget: widget.NewLabel(fmt.Sprintf("%d", cottage.ID))},
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–°—Ç–∞—Ç—É—Å", Widget: widget.NewLabel(cottage.Status)},
		},
		OnSubmit: func() {
			err := a.cottageService.UpdateCottageName(cottage.ID, nameEntry.Text)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}
			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
			a.calendarWidget.Update()
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–∫", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

// showTariffsDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏
func (a *StyledGuestApp) showTariffsDialog() {
	tariffs, _ := a.tariffService.GetTariffs()

	list := widget.NewList(
		func() int { return len(tariffs) },
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–¢–∞—Ä–∏—Ñ"),
				widget.NewLabel("–¶–µ–Ω–∞"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			tariff := tariffs[id]
			box := item.(*fyne.Container)

			box.Objects[0].(*widget.Label).SetText(tariff.Name)
			box.Objects[1].(*widget.Label).SetText(fmt.Sprintf("%.2f ‚ÇΩ/—Å—É—Ç–∫–∏", tariff.PricePerDay))

			box.Objects[2].(*widget.Button).OnTapped = func() {
				a.showEditTariffDialog(tariff)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞")

	priceEntry := widget.NewEntry()
	priceEntry.SetPlaceHolder("–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏")

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", func() {
		if nameEntry.Text == "" || priceEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"), a.window)
			return
		}

		price, err := strconv.ParseFloat(priceEntry.Text, 64)
		if err != nil {
			dialog.ShowError(fmt.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
			return
		}

		err = a.tariffService.CreateTariff(nameEntry.Text, price)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω", a.window)
		tariffs, _ = a.tariffService.GetTariffs()
		list.Refresh()
	})

	content := container.NewBorder(
		widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "",
			container.NewVBox(
				nameEntry,
				priceEntry,
				addBtn,
			),
		),
		nil, nil, nil,
		list,
	)

	d := dialog.NewCustom("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(500, 500))
	d.Show()
}

// showEditTariffDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
func (a *StyledGuestApp) showEditTariffDialog(tariff models.Tariff) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(tariff.Name)

	priceEntry := widget.NewEntry()
	priceEntry.SetText(fmt.Sprintf("%.2f", tariff.PricePerDay))

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", Widget: priceEntry},
		},
		OnSubmit: func() {
			price, err := strconv.ParseFloat(priceEntry.Text, 64)
			if err != nil {
				dialog.ShowError(fmt.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
				return
			}

			err = a.tariffService.UpdateTariff(tariff.ID, nameEntry.Text, price)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}
