package ui

import (
	"image/color"
	"log"
	"os"
	"path/filepath"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/widget"
)

// DiagonalButton –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
type DiagonalButton struct {
	widget.BaseWidget

	leftImage   string
	rightImage  string
	leftTapped  func()
	rightTapped func()
	text        string
	minSize     fyne.Size
	maxSize     fyne.Size

	// –ö–µ—à–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
	leftImageObj  *canvas.Image
	rightImageObj *canvas.Image
	textLabel     *canvas.Text
	bg            *canvas.Rectangle
}

// SetMinSize —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
func (db *DiagonalButton) SetMinSize(size fyne.Size) {
	db.minSize = size
}

// SetMaxSize —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
func (db *DiagonalButton) SetMaxSize(size fyne.Size) {
	db.maxSize = size
}

// MinSize –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
func (db *DiagonalButton) MinSize() fyne.Size {
	if db.minSize.Width > 0 && db.minSize.Height > 0 {
		return db.minSize
	}
	return fyne.NewSize(191, 62)
}

// NewDiagonalButton —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
func NewDiagonalButtonImage(leftImage, rightImage string, text string, leftTapped, rightTapped func()) *DiagonalButton {
	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
	projectDir := "C:\\Users\\VallfIK\\Documents\\GitHub\\bazaotdx"
	leftImagePath := filepath.Join(projectDir, "images", leftImage)
	rightImagePath := filepath.Join(projectDir, "images", rightImage)

	// –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
	log.Printf("üìÑ –ü—É—Ç—å –∫ –ª–µ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: %s", leftImagePath)
	log.Printf("üìÑ –ü—É—Ç—å –∫ –ø—Ä–∞–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: %s", rightImagePath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
	if _, err := os.Stat(leftImagePath); err != nil {
		if os.IsNotExist(err) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", leftImagePath)
			return nil
		} else {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: %v", err)
			return nil
		}
	}

	if _, err := os.Stat(rightImagePath); err != nil {
		if os.IsNotExist(err) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", rightImagePath)
			return nil
		} else {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: %v", err)
			return nil
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤
	if !strings.HasSuffix(leftImagePath, ".png") {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª %s –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .png", leftImagePath)
		return nil
	}
	if !strings.HasSuffix(rightImagePath, ".png") {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª %s –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .png", rightImagePath)
		return nil
	}

	log.Printf("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞")

	db := &DiagonalButton{
		leftImage:   leftImagePath,
		rightImage:  rightImagePath,
		leftTapped:  leftTapped,
		rightTapped: rightTapped,
		text:        text,
	}
	db.ExtendBaseWidget(db)

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å—Ä–∞–∑—É
	db.leftImageObj = canvas.NewImageFromFile(leftImagePath)
	if db.leftImageObj == nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s", leftImagePath)
		return nil
	}
	log.Printf("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %s", leftImagePath)

	db.rightImageObj = canvas.NewImageFromFile(rightImagePath)
	if db.rightImageObj == nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: %s", rightImagePath)
		return nil
	}
	log.Printf("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: %s", rightImagePath)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	if db.leftImageObj != nil {
		originalSize := db.leftImageObj.Size()
		log.Printf("‚úÖ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", originalSize)
		db.leftImageObj.Resize(fyne.NewSize(191, 62))
		log.Printf("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–º")
	}

	if db.rightImageObj != nil {
		originalSize := db.rightImageObj.Size()
		log.Printf("‚úÖ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø—Ä–∞–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", originalSize)
		db.rightImageObj.Resize(fyne.NewSize(191, 62))
		log.Printf("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–º")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if db.leftImageObj != nil {
		newSize := db.leftImageObj.Size()
		log.Printf("‚úÖ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", newSize)
	}

	if db.rightImageObj != nil {
		newSize := db.rightImageObj.Size()
		log.Printf("‚úÖ –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∞–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", newSize)
	}

	// –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏
	bgColor := color.NRGBA{R: 255, G: 255, B: 255, A: 255}
	db.bg = canvas.NewRectangle(bgColor)
	db.bg.Resize(fyne.NewSize(191, 62))

	// –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
	textColor := color.NRGBA{R: 0, G: 128, B: 0, A: 255} // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
	db.textLabel = canvas.NewText(text, textColor)
	db.textLabel.TextSize = 12 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
	db.textLabel.Alignment = fyne.TextAlignCenter
	db.textLabel.Resize(fyne.NewSize(191, 62))

	log.Printf("‚úÖ –ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
	return db
}

func (db *DiagonalButton) Tapped(evt *fyne.PointEvent) {
	size := db.Size()
	if size.Width == 0 || size.Height == 0 {
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º, –Ω–∞ –∫–∞–∫—É—é —á–∞—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–Ω—É–ª–∏
	// –î–∏–∞–≥–æ–Ω–∞–ª—å –∏–¥–µ—Ç –∏–∑ –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
	k := size.Height / size.Width
	expectedY := evt.Position.X * k

	if evt.Position.Y < expectedY {
		// –ö–ª–∏–∫ –Ω–∞ –ª–µ–≤—É—é —á–∞—Å—Ç—å (–≤–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
		if db.leftTapped != nil {
			db.leftTapped()
		}
	} else {
		// –ö–ª–∏–∫ –Ω–∞ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å (–Ω–∏–∂–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
		if db.rightTapped != nil {
			db.rightTapped()
		}
	}
}

// TappedSecondary –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
func (db *DiagonalButton) TappedSecondary(_ *fyne.PointEvent) {}

// CreateRenderer —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏
func (db *DiagonalButton) CreateRenderer() fyne.WidgetRenderer {
	return &diagonalButtonRenderer{
		base: db,
	}
}

type diagonalButtonRenderer struct {
	base *DiagonalButton
	bg   *canvas.Rectangle
}

// Layout –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
func (r *diagonalButtonRenderer) Layout(size fyne.Size) {
	if r.bg != nil {
		r.bg.Resize(size)
	}
}

// MinSize –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
func (r *diagonalButtonRenderer) MinSize() fyne.Size {
	return fyne.NewSize(191, 62)
}

// Refresh –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä
func (r *diagonalButtonRenderer) Refresh() {
	if r.bg != nil {
		r.bg.FillColor = color.NRGBA{R: 255, G: 255, B: 255, A: 255} // –ë–µ–ª—ã–π —Ñ–æ–Ω
	}
	if r.base.leftImageObj != nil {
		r.base.leftImageObj.Refresh()
	}
	if r.base.rightImageObj != nil {
		r.base.rightImageObj.Refresh()
	}
	if r.base.textLabel != nil {
		r.base.textLabel.Refresh()
	}
}

// Objects –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
func (r *diagonalButtonRenderer) Objects() []fyne.CanvasObject {
	size := r.base.Size()
	if size.Width <= 0 || size.Height <= 0 {
		size = r.MinSize()
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –∫–Ω–æ–ø–∫–∏
	if r.bg == nil {
		r.bg = canvas.NewRectangle(color.White)
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
	if r.bg != nil {
		r.bg.Resize(size)
	}

	if r.base.leftImageObj != nil {
		r.base.leftImageObj.Resize(size)
	}

	if r.base.rightImageObj != nil {
		r.base.rightImageObj.Resize(size)
	}

	if r.base.textLabel != nil {
		r.base.textLabel.Resize(size)
		r.base.textLabel.Alignment = fyne.TextAlignCenter
		r.base.textLabel.TextSize = 12 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏
	diagonalMask := canvas.NewRasterWithPixels(func(x, y, w, h int) color.Color {
		if w == 0 || h == 0 {
			return color.Transparent
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
		k := float32(h) / float32(w)
		expectedY := int(float32(x) * k)

		// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –≤—ã—à–µ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ - –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
		if y < expectedY {
			return color.White
		}
		// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ - –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å
		return color.Transparent
	})

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
	return []fyne.CanvasObject{
		r.bg,                  // –§–æ–Ω
		diagonalMask,         // –ú–∞—Å–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
		r.base.leftImageObj,  // –õ–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		r.base.rightImageObj, // –ü—Ä–∞–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		r.base.textLabel,     // –¢–µ–∫—Å—Ç
	}
}

// Destroy —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç —Ä–µ–Ω–¥–µ—Ä–µ—Ä
func (r *diagonalButtonRenderer) Destroy() {
	// –í Fyne v2 –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã, –æ–Ω–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
}
