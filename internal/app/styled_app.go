// internal/ui/styled_app.go
package app

import (
	"fmt"
	"strconv"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/widget"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/ui"
)









// showQuickBookingDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
func (a *StyledGuestApp) showQuickBookingDialog() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤
	cottages, err := a.cottageService.GetFreeCottages()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(cottages) == 0 {
		dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤", a.window)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	tariffs, err := a.tariffService.GetTariffs()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
	nameEntry := ui.StyledEntry("–§–ò–û –≥–æ—Å—Ç—è")
	phoneEntry := ui.StyledEntry("+7 (999) 123-45-67")
	emailEntry := ui.StyledEntry("email@example.com")

	cottageOptions := make([]string, len(cottages))
	for i, c := range cottages {
		cottageOptions[i] = fmt.Sprintf("%d. %s", c.ID, c.Name)
	}
	cottageSelect := widget.NewSelect(cottageOptions, nil)

	tariffOptions := make([]string, len(tariffs))
	for i, t := range tariffs {
		tariffOptions[i] = fmt.Sprintf("%s - %.2f ‚ÇΩ/—Å—É—Ç–∫–∏", t.Name, t.PricePerDay)
	}
	tariffSelect := widget.NewSelect(tariffOptions, nil)

	// –î–∞—Ç—ã
	checkInDate := time.Now().Add(24 * time.Hour)
	checkOutDate := checkInDate.Add(24 * time.Hour)

	checkInPicker := ui.NewDatePickerButton("–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", a.window, func(t time.Time) {
			checkInDate = t
		})
	checkInPicker.SetSelectedDate(checkInDate)
	checkOutPicker := ui.NewDatePickerButton("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", a.window, func(t time.Time) {
			checkOutDate = t
		})
	checkOutPicker.SetSelectedDate(checkOutDate)

	notesEntry := ui.StyledEntry("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è...")
	notesEntry.SetPlaceHolder("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è...")
	notesEntry.SetMinRowsVisible(3)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–§–ò–û –≥–æ—Å—Ç—è", Widget: nameEntry},
			{Text: "–¢–µ–ª–µ—Ñ–æ–Ω", Widget: phoneEntry},
			{Text: "Email", Widget: emailEntry},
			{Text: "–î–æ–º–∏–∫", Widget: cottageSelect},
			{Text: "–¢–∞—Ä–∏—Ñ", Widget: tariffSelect},
			{Text: "–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", Widget: checkInPicker},
			{Text: "–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", Widget: checkOutPicker},
			{Text: "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", Widget: notesEntry},
		},
		OnSubmit: func() {
			// –í–∞–ª–∏–¥–∞—Ü–∏—è
			if nameEntry.Text == "" || phoneEntry.Text == "" ||
				cottageSelect.SelectedIndex() < 0 || tariffSelect.SelectedIndex() < 0 {
				dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"), a.window)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
			booking := models.Booking{
				CottageID:    cottages[cottageSelect.SelectedIndex()].ID,
				GuestName:    nameEntry.Text,
				Phone:        phoneEntry.Text,
				Email:        emailEntry.Text,
				CheckInDate:  checkInPicker.GetSelectedDate(),
				CheckOutDate: checkOutPicker.GetSelectedDate(),
				TariffID:     tariffs[tariffSelect.SelectedIndex()].ID,
				Notes:        notesEntry.Text,
			}

			_, err := a.bookingService.CreateBooking(booking)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			a.calendarWidget.Update()
			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", a.window)
		},
		OnCancel: func() {},
	}

	d := dialog.NewCustom("–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 600))
	d.Show()
}

// showReportsDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –æ—Ç—á–µ—Ç–∞–º–∏
func (a *StyledGuestApp) showReportsDialog() {
	content := container.NewVBox(
		widget.NewCard("–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "", container.NewVBox(
			widget.NewButton("üìä –û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
			widget.NewButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
			widget.NewButton("üìÖ –û—Ç—á–µ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º", func() {
				dialog.ShowInformation("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
			}),
		)),
	)

	d := dialog.NewCustom("–û—Ç—á–µ—Ç—ã", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(400, 300))
	d.Show()
}

// showCottagesDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∏–∫–∞–º–∏
func (a *StyledGuestApp) showCottagesDialog() {
	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–∏–∫–æ–≤
	cottages, _ := a.cottageService.GetAllCottages()

	list := widget.NewList(
		func() int { return len(cottages) },
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–î–æ–º–∏–∫"),
				widget.NewLabel("–°—Ç–∞—Ç—É—Å"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			cottage := cottages[id]
			box := item.(*fyne.Container)

			box.Objects[0].(*widget.Label).SetText(fmt.Sprintf("%d. %s", cottage.ID, cottage.Name))

			status := "–°–≤–æ–±–æ–¥–µ–Ω"
			if cottage.Status == "occupied" {
				status = "–ó–∞–Ω—è—Ç"
			}
			box.Objects[1].(*widget.Label).SetText(status)

			box.Objects[2].(*widget.Button).OnTapped = func() {
				a.showEditCottageDialog(cottage)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞")

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		err := a.cottageService.AddCottage(nameEntry.Text)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", a.window)
		cottages, _ = a.cottageService.GetAllCottages()
		list.Refresh()
		a.calendarWidget.Update()
	})

	content := container.NewBorder(
		widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", "",
			container.NewBorder(nil, nil, nil, addBtn, nameEntry),
		),
		nil, nil, nil,
		list,
	)

	d := dialog.NewCustom("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∏–∫–∞–º–∏", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(600, 500))
	d.Show()
}

// showEditCottageDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∏–∫–∞
func (a *StyledGuestApp) showEditCottageDialog(cottage models.Cottage) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(cottage.Name)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "ID", Widget: widget.NewLabel(fmt.Sprintf("%d", cottage.ID))},
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–°—Ç–∞—Ç—É—Å", Widget: widget.NewLabel(cottage.Status)},
		},
		OnSubmit: func() {
			err := a.cottageService.UpdateCottageName(cottage.ID, nameEntry.Text)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}
			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
			a.calendarWidget.Update()
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–∫", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

// showTariffsDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏
func (a *StyledGuestApp) showTariffsDialog() {
	tariffs, _ := a.tariffService.GetTariffs()

	list := widget.NewList(
		func() int { return len(tariffs) },
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–¢–∞—Ä–∏—Ñ"),
				widget.NewLabel("–¶–µ–Ω–∞"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			tariff := tariffs[id]
			box := item.(*fyne.Container)

			box.Objects[0].(*widget.Label).SetText(tariff.Name)
			box.Objects[1].(*widget.Label).SetText(fmt.Sprintf("%.2f ‚ÇΩ/—Å—É—Ç–∫–∏", tariff.PricePerDay))

			box.Objects[2].(*widget.Button).OnTapped = func() {
				a.showEditTariffDialog(tariff)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞")

	priceEntry := widget.NewEntry()
	priceEntry.SetPlaceHolder("–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏")

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", func() {
		if nameEntry.Text == "" || priceEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"), a.window)
			return
		}

		price, err := strconv.ParseFloat(priceEntry.Text, 64)
		if err != nil {
			dialog.ShowError(fmt.Errorf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
			return
		}

		err = a.tariffService.CreateTariff(nameEntry.Text, price)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ –¥–æ–±–∞–≤–ª–µ–Ω", a.window)
		tariffs, _ = a.tariffService.GetTariffs()
		list.Refresh()
	})

	content := container.NewBorder(
		widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "",
			container.NewVBox(
				nameEntry,
				priceEntry,
				addBtn,
			),
		),
		nil, nil, nil,
		list,
	)

	d := dialog.NewCustom("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", "–ó–∞–∫—Ä—ã—Ç—å", content, a.window)
	d.Resize(fyne.NewSize(500, 500))
	d.Show()
}

// showEditTariffDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
func (a *StyledGuestApp) showEditTariffDialog(tariff models.Tariff) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(tariff.Name)

	priceEntry := widget.NewEntry()
	priceEntry.SetText(fmt.Sprintf("%.2f", tariff.PricePerDay))

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", Widget: priceEntry},
		},
		OnSubmit: func() {
			if nameEntry.Text == "" {
				dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
				return
			}

			price, err := strconv.ParseFloat(priceEntry.Text, 64)
			if err != nil {
				dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
				return
			}

			err = a.tariffService.UpdateTariff(tariff.ID, nameEntry.Text, price)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 400))
	d.Show()
}
