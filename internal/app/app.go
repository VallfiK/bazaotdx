package app

import (
	"fmt"
	"image/color"
	"log"
	"strconv"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/service"
	"github.com/VallfIK/bazaotdx/internal/ui"
)

// StyledGuestApp ‚Äî —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á—ë—Ç–∞ –≥–æ—Å—Ç–µ–π
type StyledGuestApp struct {
	app                   fyne.App
	window                fyne.Window
	guestService          *service.GuestService
	cottageService        *service.CottageService
	tariffService         *service.TariffService
	bookingService        *service.BookingService
	updateCottagesContent func()
	cottages              []models.Cottage
	calendarWidget        *ui.BookingCalendar
	bookingListWidget     *ui.BookingListWidget
	topBar                fyne.CanvasObject
	sidePanel             fyne.CanvasObject
	mainContent           fyne.CanvasObject
}

func NewStyledGuestApp(
	guestService *service.GuestService,
	cottageService *service.CottageService,
	tariffService *service.TariffService,
	bookingService *service.BookingService,
) *StyledGuestApp {
	a := app.New()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
	a.Settings().SetTheme(&ui.ForestTheme{})

	w := a.NewWindow("üå≤ –õ–µ—Å–Ω–∞—è –ë–∞–∑–∞ –û—Ç–¥—ã—Ö–∞ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
	w.Resize(fyne.NewSize(1600, 900))
	w.CenterOnScreen()

	app := &StyledGuestApp{
		app:            a,
		window:         w,
		guestService:   guestService,
		cottageService: cottageService,
		tariffService:  tariffService,
		bookingService: bookingService,
	}

	// Initialize widgets
	app.calendarWidget = ui.NewBookingCalendar(
		app.bookingService,
		app.cottageService,
		app.tariffService,
		app.window,
	)
	app.bookingListWidget = ui.NewBookingListWidget(
		app.bookingService,
		app.cottageService,
		app.window,
	)

	// Load cottages
	var err error
	app.cottages, err = app.cottageService.GetAllCottages()
	if err != nil {
		log.Printf("Error loading cottages: %v", err)
	}

	app.createStyledUI()

	return app
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (a *StyledGuestApp) Run() {
	a.window.ShowAndRun()
}

// createStyledUI —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (a *StyledGuestApp) createStyledUI() {
	// –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
	topBar := a.createTopBar()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥–∂–µ—Ç
	calendarWidget := ui.NewBookingCalendar(
		a.bookingService,
		a.cottageService,
		a.tariffService,
		a.window,
	)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	bookingListWidget := ui.NewBookingListWidget(
		a.bookingService,
		a.cottageService,
		a.window,
	)

	sidePanel := a.createSidePanel()
	mainContent := a.createMainContent()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
	a.window.Resize(fyne.NewSize(1200, 800))
	// –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
	a.window.SetFixedSize(true)

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
	content := container.NewBorder(
		topBar, nil,
		sidePanel,
		mainContent,
	)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã
	a.topBar = topBar
	a.calendarWidget = calendarWidget
	a.bookingListWidget = bookingListWidget
	a.sidePanel = sidePanel
	a.mainContent = mainContent

	a.window.SetContent(content)
}

// createTopBar —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
func (a *StyledGuestApp) createTopBar() fyne.CanvasObject {
	// –§–æ–Ω –ø–∞–Ω–µ–ª–∏
	bg := canvas.NewRectangle(ui.DarkForestGreen)
	bg.SetMinSize(fyne.NewSize(0, 80))

	// –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
	title := canvas.NewText("üå≤ –õ–µ—Å–Ω–∞—è –ë–∞–∑–∞ –û—Ç–¥—ã—Ö–∞", color.White)
	title.TextSize = 28
	title.TextStyle = fyne.TextStyle{Bold: true}

	subtitle := canvas.NewText("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º", color.White)
	subtitle.TextSize = 14

	titleContainer := container.NewVBox(
		title,
		subtitle,
	)

	// –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞
	timeLabel := canvas.NewText("", color.White)
	timeLabel.TextSize = 16
	updateTime := func() {
		now := time.Now()
		timeLabel.Text = now.Format("15:04:05\n02.01.2006")
		timeLabel.Refresh()
	}

	updateTime()
	go func() {
		for range time.Tick(1 * time.Second) {
			updateTime()
		}
	}()

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	adminText := canvas.NewText("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", color.White)
logoutBtn := widget.NewButtonWithIcon("–í—ã—Ö–æ–¥", theme.LogoutIcon(), func() {
		dialog.ShowConfirm("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
			func(ok bool) {
				if ok {
					a.window.Close()
				}
			}, a.window)
	})
userInfo := container.NewVBox(adminText, logoutBtn)

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞
	content := container.NewBorder(
		nil, nil,
		container.NewPadded(titleContainer),
		container.NewHBox(
			container.NewPadded(timeLabel),
			widget.NewSeparator(),
			container.NewPadded(userInfo),
		),
		nil,
	)

	return container.NewMax(bg, content)
}

// createSidePanel —Å–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
func (a *StyledGuestApp) createSidePanel() fyne.CanvasObject {
	// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	statsCards := container.NewVBox()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	updateStats := func() {
		statsCards.Objects = nil

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		cottages, _ := a.cottageService.GetAllCottages()
		freeCottages := 0
		for _, c := range cottages {
			if c.Status == "free" {
				freeCottages++
			}
		}

		// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
		statsCards.Add(a.createStatsDisplay())
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	updateStats()

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	quickActions := container.NewVBox(
		widget.NewButtonWithIcon("–ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", theme.ContentAddIcon(), func() {
			a.showQuickBookingDialog()
		}),
		widget.NewButtonWithIcon("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", theme.CalendarIcon(), func() {
			a.showUpcomingArrivals()
		}),
	)

	return container.NewVBox(
		statsCards,
		widget.NewSeparator(),
		quickActions,
	)
}

// createMainContent —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
func (a *StyledGuestApp) createMainContent() fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	calendarTab := container.NewHSplit(a.calendarWidget, a.bookingListWidget)
	calendarTab.SetOffset(0.7) // 70% –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, 30% –¥–ª—è —Å–ø–∏—Å–∫–∞

	// –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
	tabs := container.NewAppTabs(
		container.NewTabItem("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", calendarTab),
		a.createTariffsTab(),
		a.createCottagesTab(),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
	tabs.Items[0].Icon = theme.ViewFullScreenIcon()
	tabs.Items[1].Icon = theme.SettingsIcon()
	tabs.Items[2].Icon = theme.HomeIcon()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
	tabs.Resize(fyne.NewSize(1000, 600))
	return tabs
}

// createStatsDisplay —Å–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
func (a *StyledGuestApp) createStatsDisplay() fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	statsLabel := widget.NewLabel("")
	updateBtn := widget.NewButton("–û–±–Ω–æ–≤–∏—Ç—å", func() {
		a.updateStats(statsLabel)
	})

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	go a.updateStats(statsLabel)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	content := container.NewVBox(
		widget.NewCard("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "", statsLabel),
		updateBtn,
	)

	return content
}

// createCottagesTab —Å–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–æ–º–∏–∫–æ–≤
func (a *StyledGuestApp) createCottagesTab() *container.TabItem {
	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–∏–∫–æ–≤
	var cottages []models.Cottage
	var cottageList *widget.List

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–∏–∫–æ–≤
	var updateCottageList func()
	updateCottageList = func() {
		c, err := a.cottageService.GetAllCottages()
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}
		cottages = c

		if cottageList != nil {
			cottageList.Refresh()
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
	cottageList = widget.NewList(
		func() int {
			return len(cottages)
		},
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ"),
				widget.NewLabel("–°—Ç–∞—Ç—É—Å"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			if id >= len(cottages) {
				return
			}
			cottage := cottages[id]

			hbox := item.(*fyne.Container)
			nameLabel := hbox.Objects[0].(*widget.Label)
			statusLabel := hbox.Objects[1].(*widget.Label)
			editBtn := hbox.Objects[2].(*widget.Button)

			nameLabel.SetText(cottage.Name)
			statusLabel.SetText(cottage.Status)

			editBtn.OnTapped = func() {
				a.showEditCottageDialog(cottage)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–∏–∫–∞
	nameEntry := widget.NewEntry()
	statusSelect := widget.NewSelect([]string{"active", "inactive"}, nil)

	addForm := widget.NewForm(
		widget.NewFormItem("–ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
		widget.NewFormItem("–°—Ç–∞—Ç—É—Å", statusSelect),
	)

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		err := a.cottageService.AddCottage(nameEntry.Text)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		// –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
		nameEntry.SetText("")
		statusSelect.Selected = "active"
		updateCottageList()

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ",
			fmt.Sprintf("–î–æ–º–∏–∫ '%s' –¥–æ–±–∞–≤–ª–µ–Ω", nameEntry.Text),
			a.window,
		)
	})

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	refreshBtn := widget.NewButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", func() {
		updateCottageList()
		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
	})

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∏–∫–∏
	updateCottageList()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –¥–ª—è —Å–ø–∏—Å–∫–∞
	listScroll := container.NewScroll(cottageList)
	listScroll.SetMinSize(fyne.NewSize(600, 400))

	content := container.NewBorder(
		container.NewVBox(
			widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–∏–∫", "", container.NewVBox(addForm, addBtn)),
			container.NewHBox(refreshBtn),
			widget.NewSeparator(),
		),
		nil, nil, nil,
		listScroll,
	)

	return container.NewTabItem("–î–æ–º–∏–∫–∏", content)
}

// createTariffsTab —Å–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
func (a *StyledGuestApp) createTariffsTab() *container.TabItem {
	// –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")

	// –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
	var filteredTariffs []models.Tariff
	var tariffList *widget.List

	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
	statsLabel := widget.NewLabel("")

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
	var updateTariffList func()
	updateTariffList = func() {
		tariffs, err := a.tariffService.GetTariffs()
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
		filteredTariffs = make([]models.Tariff, 0)
		for _, tariff := range tariffs {
			if searchEntry.Text != "" && !strings.Contains(tariff.Name, searchEntry.Text) {
				continue
			}
			filteredTariffs = append(filteredTariffs, tariff)
		}

		if tariffList != nil {
			tariffList.Refresh()
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		total := len(tariffs)
		statsLabel.SetText(fmt.Sprintf("–í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤: %d", total))
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
	tariffList = widget.NewList(
		func() int {
			return len(filteredTariffs)
		},
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ"),
				widget.NewLabel("–¶–µ–Ω–∞"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
				widget.NewButton("–£–¥–∞–ª–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			if id >= len(filteredTariffs) {
				return
			}
			tariff := filteredTariffs[id]

			hbox := item.(*fyne.Container)
			nameLabel := hbox.Objects[0].(*widget.Label)
			priceLabel := hbox.Objects[1].(*widget.Label)
			editBtn := hbox.Objects[2].(*widget.Button)
			deleteBtn := hbox.Objects[3].(*widget.Button)

			nameLabel.SetText(tariff.Name)
			priceLabel.SetText(fmt.Sprintf("%.2f —Ä—É–±./–¥–µ–Ω—å", tariff.PricePerDay))

			editBtn.OnTapped = func() {
				a.showEditTariffDialog(tariff)
			}

			deleteBtn.OnTapped = func() {
				dialog.ShowConfirm("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
					fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ '%s'?", tariff.Name),
					func(ok bool) {
						if ok {
							err := a.tariffService.DeleteTariff(tariff.ID)
							if err != nil {
								dialog.ShowError(err, a.window)
								return
							}
							updateTariffList()
							dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω", a.window)
						}
					},
					a.window)
			}
		},
	)

	// –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
	searchEntry.OnChanged = func(text string) {
		updateTariffList()
	}

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
	nameEntry := widget.NewEntry()
	priceEntry := widget.NewEntry()

	addForm := widget.NewForm(
		widget.NewFormItem("–ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
		widget.NewFormItem("–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", priceEntry),
	)

	addBtn := widget.NewButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		price, err := strconv.ParseFloat(priceEntry.Text, 64)
		if err != nil {
			dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
			return
		}

		err = a.tariffService.CreateTariff(nameEntry.Text, price)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		// –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
		nameEntry.SetText("")
		priceEntry.SetText("")
		updateTariffList()

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ",
			fmt.Sprintf("–¢–∞—Ä–∏—Ñ '%s' –¥–æ–±–∞–≤–ª–µ–Ω", nameEntry.Text),
			a.window,
		)
	})

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	refreshBtn := widget.NewButton("–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", func() {
		updateTariffList()
		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
	})

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	updateTariffList()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –¥–ª—è —Å–ø–∏—Å–∫–∞
	listScroll := container.NewScroll(tariffList)
	listScroll.SetMinSize(fyne.NewSize(600, 400))

	content := container.NewBorder(
		container.NewVBox(
			searchEntry,
			widget.NewCard("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", "", container.NewVBox(addForm, addBtn)),
			container.NewHBox(refreshBtn, statsLabel),
			widget.NewSeparator(),
		),
		nil, nil, nil,
		listScroll,
	)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≤–∫–ª–∞–¥–∫–æ–π
	return container.NewTabItem("–¢–∞—Ä–∏—Ñ—ã", content)
}



func (a *StyledGuestApp) createReportsTab() *container.TabItem {
	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
	occupancyBtn := widget.NewButton("–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏", func() {
		a.generateOccupancyReport()
	})

	revenueBtn := widget.NewButton("–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö", func() {
		a.generateRevenueReport()
	})

	upcomingBtn := widget.NewButton("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", func() {
		a.showUpcomingArrivals()
	})

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
	statsLabel := widget.NewLabel("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
	a.updateStats(statsLabel)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
	content := container.NewVBox(
		widget.NewCard("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "", statsLabel),
		widget.NewLabel("–û—Ç—á–µ—Ç—ã:"),
		container.NewHBox(occupancyBtn, revenueBtn),
		upcomingBtn,
	)

	return container.NewTabItem("–û—Ç—á–µ—Ç—ã", content)
}

// updateStats –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (a *StyledGuestApp) updateStats(label *widget.Label) {
	go func() {
		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
		now := time.Now()
		startOfMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.Local)
		endOfMonth := startOfMonth.AddDate(0, 1, -1)

		bookings, err := a.bookingService.GetBookingsByDateRange(startOfMonth, endOfMonth)
		if err != nil {
			label.SetText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
			return
		}

		totalBookings := len(bookings)
		var totalRevenue float64
		activeBookings := 0

		for _, booking := range bookings {
			if booking.Status != models.BookingStatusCancelled {
				totalRevenue += booking.TotalCost
				activeBookings++
			}
		}

		statsText := fmt.Sprintf(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s %d:
‚Ä¢ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: %d
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: %d  
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: %.2f —Ä—É–±.
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: %.2f —Ä—É–±.`,
			a.getMonthName(now.Month()), now.Year(),
			totalBookings, activeBookings, totalRevenue,
			func() float64 {
				if activeBookings > 0 {
					return totalRevenue / float64(activeBookings)
				}
				return 0
			}())

		label.SetText(statsText)
	}()
}

// getMonthName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
func (a *StyledGuestApp) getMonthName(month time.Month) string {
	months := []string{
		"", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
		"–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
	}
	return months[month]
}

func (a *StyledGuestApp) generateOccupancyReport() {
	dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *StyledGuestApp) generateRevenueReport() {
	dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *StyledGuestApp) showUpcomingArrivals() {
	bookings, err := a.bookingService.GetUpcomingBookings()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(bookings) == 0 {
		dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–µ–∑–¥–æ–≤", a.window)
		return
	}

	content := container.NewVBox()
	for _, booking := range bookings {
		cottageName := ""
		for _, c := range a.cottages {
			if c.ID == booking.CottageID {
				cottageName = c.Name
				break
			}
		}

		card := widget.NewCard(
			fmt.Sprintf("%s - %s", booking.GuestName, cottageName),
			fmt.Sprintf("–ó–∞–µ–∑–¥: %s", booking.CheckInDate.Format("02.01.2006")),
			widget.NewLabel(fmt.Sprintf("–¢–µ–ª–µ—Ñ–æ–Ω: %s", booking.Phone)),
		)
		content.Add(card)
	}

	scroll := container.NewScroll(content)
	scroll.SetMinSize(fyne.NewSize(500, 400))

	d := dialog.NewCustom("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", "–ó–∞–∫—Ä—ã—Ç—å", scroll, a.window)
	d.Resize(fyne.NewSize(600, 500))
	d.Show()
}
