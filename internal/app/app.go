package app

import (
	"fmt"
	"image/color"
	"log"
	"strconv"
	"strings"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/service"
	"github.com/VallfIK/bazaotdx/internal/ui"
)

// StyledGuestApp ‚Äî —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á—ë—Ç–∞ –≥–æ—Å—Ç–µ–π "–ó–≤—É–∫–∏ –õ–µ—Å–∞"
type StyledGuestApp struct {
	app                   fyne.App
	window                fyne.Window
	guestService          *service.GuestService
	cottageService        *service.CottageService
	tariffService         *service.TariffService
	bookingService        *service.BookingService
	updateCottagesContent func()
	cottages              []models.Cottage
	calendarWidget        *ui.BookingCalendar
	bookingListWidget     *ui.BookingListWidget
	topBar                fyne.CanvasObject
	sidePanel             fyne.CanvasObject
	mainContent           fyne.CanvasObject
}

func NewStyledGuestApp(
	guestService *service.GuestService,
	cottageService *service.CottageService,
	tariffService *service.TariffService,
	bookingService *service.BookingService,
) *StyledGuestApp {
	a := app.New()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ç–µ–º—É
	a.Settings().SetTheme(&ui.ForestTheme{})

	w := a.NewWindow("üå≤ –ó–≤—É–∫–∏ –õ–µ—Å–∞ - –ë–∞–∑–∞ –û—Ç–¥—ã—Ö–∞")

	// –§–ò–ö–°–ò–†–£–ï–ú –†–ê–ó–ú–ï–† –û–ö–ù–ê
	fixedSize := fyne.NewSize(1400, 800)
	w.Resize(fixedSize)
	w.SetFixedSize(true) // –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
	w.CenterOnScreen()

	app := &StyledGuestApp{
		app:            a,
		window:         w,
		guestService:   guestService,
		cottageService: cottageService,
		tariffService:  tariffService,
		bookingService: bookingService,
	}

	// Initialize widgets
	app.calendarWidget = ui.NewBookingCalendar(
		app.bookingService,
		app.cottageService,
		app.tariffService,
		app.window,
	)
	app.bookingListWidget = ui.NewBookingListWidget(
		app.bookingService,
		app.cottageService,
		app.window,
	)

	// Load cottages
	var err error
	app.cottages, err = app.cottageService.GetAllCottages()
	if err != nil {
		log.Printf("Error loading cottages: %v", err)
	}

	app.createStyledUI()

	return app
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (a *StyledGuestApp) Run() {
	a.window.ShowAndRun()
}

// createStyledUI —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (a *StyledGuestApp) createStyledUI() {
	// –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
	topBar := a.createTopBar()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥–∂–µ—Ç
	calendarWidget := ui.NewBookingCalendar(
		a.bookingService,
		a.cottageService,
		a.tariffService,
		a.window,
	)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	bookingListWidget := ui.NewBookingListWidget(
		a.bookingService,
		a.cottageService,
		a.window,
	)

	// –°–æ–∑–¥–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
	sidePanel := a.createSidePanel()
	mainContent := a.createMainContent()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã
	a.topBar = topBar
	a.calendarWidget = calendarWidget
	a.bookingListWidget = bookingListWidget
	a.sidePanel = sidePanel
	a.mainContent = mainContent

	// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	content := container.NewBorder(
		topBar,                                // –í–µ—Ä—Ö - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 80px
		nil,                                   // –ù–∏–∑
		container.NewWithoutLayout(sidePanel), // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ 280px
		nil,                                   // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
		mainContent,                           // –¶–µ–Ω—Ç—Ä - –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
	)

	a.window.SetContent(content)
}

// createTopBar —Å–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
func (a *StyledGuestApp) createTopBar() fyne.CanvasObject {
	// –§–æ–Ω –ø–∞–Ω–µ–ª–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
	bg := canvas.NewRasterWithPixels(func(x, y, w, h int) color.Color {
		ratio := float32(x) / float32(w)
		// –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–æ–≥–æ –∫ –ª–µ—Å–Ω–æ–º—É –∑–µ–ª–µ–Ω–æ–º—É
		return lerpColor(ui.DarkForestGreen, ui.ForestGreen, ratio)
	})
	bg.SetMinSize(fyne.NewSize(0, 80))

	// –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–æ–π
	title := canvas.NewText("üå≤ –ó–≤—É–∫–∏ –õ–µ—Å–∞", color.White)
	title.TextSize = 32
	title.TextStyle = fyne.TextStyle{Bold: true}

	subtitle := canvas.NewText("–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", ui.GoldenYellow)
	subtitle.TextSize = 16
	subtitle.TextStyle = fyne.TextStyle{Italic: true}

	titleContainer := container.NewVBox(
		title,
		subtitle,
	)

	// –í—Ä–µ–º—è –∏ –¥–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
	timeLabel := canvas.NewText("", color.White)
	timeLabel.TextSize = 18
	timeLabel.TextStyle = fyne.TextStyle{Bold: true}
	timeLabel.Alignment = fyne.TextAlignCenter

	updateTime := func() {
		now := time.Now()
		fyne.Do(func() {
			timeLabel.Text = now.Format("15:04:05\n02.01.2006")
			timeLabel.Refresh()
		})
	}

	updateTime()
	go func() {
		for range time.Tick(1 * time.Second) {
			fyne.Do(func() {
				updateTime()
			})
		}
	}()

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	adminText := canvas.NewText("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", color.White)
	adminText.TextSize = 14
	adminText.TextStyle = fyne.TextStyle{Bold: true}

	logoutBtn := widget.NewButtonWithIcon("–í—ã—Ö–æ–¥", theme.LogoutIcon(), func() {
		dialog.ShowConfirm("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?",
			func(ok bool) {
				if ok {
					a.window.Close()
				}
			}, a.window)
	})
	logoutBtn.Importance = widget.DangerImportance

	userInfo := container.NewVBox(adminText, logoutBtn)

	// –ö–æ–º–ø–æ–Ω–æ–≤–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	content := container.NewBorder(
		nil, nil,
		container.NewPadded(titleContainer),
		container.NewHBox(
			container.NewPadded(timeLabel),
			widget.NewSeparator(),
			container.NewPadded(userInfo),
		),
		nil,
	)

	return container.NewMax(bg, content)
}

// createSidePanel —Å–æ–∑–¥–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
func (a *StyledGuestApp) createSidePanel() fyne.CanvasObject {
	// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
	sideContainer := container.NewWithoutLayout()

	// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	statsContainer := container.NewVBox()

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏
	updateStats := func() {
		statsContainer.Objects = nil
		statsContainer.Add(a.createFixedStatsDisplay())
		statsContainer.Refresh()
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	updateStats()

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	quickBookingBtn := widget.NewButtonWithIcon("‚ú® –ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", theme.ContentAddIcon(), func() {
		a.showQuickBookingDialogFromSidePanel()
	})
	quickBookingBtn.Importance = widget.HighImportance
	quickBookingBtn.Resize(fyne.NewSize(260, 40))

	upcomingBtn := widget.NewButtonWithIcon("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", theme.MailAttachmentIcon(), func() {
		a.showUpcomingArrivals()
	})
	upcomingBtn.Resize(fyne.NewSize(260, 40))

	quickActions := container.NewVBox(
		quickBookingBtn,
		upcomingBtn,
	)

	// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
	mainSideContent := container.NewVBox(
		statsContainer,
		widget.NewCard("", "", widget.NewSeparator()),
		widget.NewCard("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "", quickActions),
	)

	// –†–∞–∑–º–µ—â–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
	sideContainer.Add(mainSideContent)
	mainSideContent.Move(fyne.NewPos(0, 0))
	mainSideContent.Resize(fyne.NewSize(280, 700))

	return sideContainer
}

// createFixedStatsDisplay —Å–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Å –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏
func (a *StyledGuestApp) createFixedStatsDisplay() fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	statsLabel := widget.NewRichTextFromMarkdown("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
	statsLabel.Resize(fyne.NewSize(260, 120)) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
	statsLabel.Wrapping = fyne.TextWrapWord   // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–ª–æ–≤–∞–º

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	updateBtn := widget.NewButtonWithIcon("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", theme.ViewRefreshIcon(), func() {
		// –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		a.updateStats(statsLabel)
	})
	updateBtn.Resize(fyne.NewSize(260, 40)) // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô –†–ê–ó–ú–ï–†
	updateBtn.Importance = widget.MediumImportance

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	go a.updateStats(statsLabel)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	content := container.NewVBox(
		widget.NewCard("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "", statsLabel),
		updateBtn,
	)

	// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	content.Resize(fyne.NewSize(270, 200))

	return content
}

// createMainContent —Å–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
func (a *StyledGuestApp) createMainContent() fyne.CanvasObject {
	// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	calendarTab := container.NewHSplit(a.calendarWidget, a.bookingListWidget)
	calendarTab.SetOffset(0.7) // 70% –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, 30% –¥–ª—è —Å–ø–∏—Å–∫–∞

	// –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
	tabs := container.NewAppTabs(
		container.NewTabItem("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", calendarTab),
		a.createTariffsTab(),
		a.createCottagesTab(),
	)

	// –§–ò–ö–°–ò–†–£–ï–ú —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
	tabs.Resize(fyne.NewSize(1100, 700))

	return tabs
}

// createCottagesTab —Å–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–æ–º–∏–∫–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
func (a *StyledGuestApp) createCottagesTab() *container.TabItem {
	var cottages []models.Cottage
	var cottageList *widget.List

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–∏–∫–æ–≤
	var updateCottageList func()
	updateCottageList = func() {
		c, err := a.cottageService.GetAllCottages()
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}
		cottages = c

		if cottageList != nil {
			cottageList.Refresh()
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
	cottageList = widget.NewList(
		func() int {
			return len(cottages)
		},
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ"),
				widget.NewLabel("–°—Ç–∞—Ç—É—Å"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			if id >= len(cottages) {
				return
			}
			cottage := cottages[id]

			hbox := item.(*fyne.Container)
			nameLabel := hbox.Objects[0].(*widget.Label)
			statusLabel := hbox.Objects[1].(*widget.Label)
			editBtn := hbox.Objects[2].(*widget.Button)

			nameLabel.SetText(cottage.Name)
			statusLabel.SetText(cottage.Status)

			editBtn.OnTapped = func() {
				a.showEditCottageDialogFixed(cottage)
			}
		},
	)

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–º–∏–∫–∞
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞")

	addForm := widget.NewForm(
		widget.NewFormItem("üè† –ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
	)

	addBtn := widget.NewButtonWithIcon("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", theme.ContentAddIcon(), func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		err := a.cottageService.AddCottage(nameEntry.Text)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		nameEntry.SetText("")
		updateCottageList()

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ",
			fmt.Sprintf("–î–æ–º–∏–∫ '%s' –¥–æ–±–∞–≤–ª–µ–Ω", nameEntry.Text),
			a.window,
		)
	})
	addBtn.Importance = widget.HighImportance

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	refreshBtn := widget.NewButtonWithIcon("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", theme.ViewRefreshIcon(), func() {
		updateCottageList()
		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
	})
	refreshBtn.Resize(fyne.NewSize(150, 40))

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∏–∫–∏
	updateCottageList()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	listScroll := container.NewScroll(cottageList)
	listScroll.Resize(fyne.NewSize(1000, 400))

	content := container.NewBorder(
		container.NewVBox(
			widget.NewCard("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–∏–∫", "", container.NewVBox(addForm, addBtn)),
			container.NewHBox(refreshBtn),
			widget.NewSeparator(),
		),
		nil, nil, nil,
		listScroll,
	)

	return container.NewTabItem("üè† –î–æ–º–∏–∫–∏", content)
}

// createTariffsTab —Å–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
func (a *StyledGuestApp) createTariffsTab() *container.TabItem {
	// –ü–æ–∏—Å–∫
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")

	// –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
	var filteredTariffs []models.Tariff
	var tariffList *widget.List

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	statsLabel := widget.NewLabel("")
	statsLabel.Resize(fyne.NewSize(200, 30))

	// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
	var updateTariffList func()
	updateTariffList = func() {
		tariffs, err := a.tariffService.GetTariffs()
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
		filteredTariffs = make([]models.Tariff, 0)
		for _, tariff := range tariffs {
			if searchEntry.Text != "" && !strings.Contains(strings.ToLower(tariff.Name), strings.ToLower(searchEntry.Text)) {
				continue
			}
			filteredTariffs = append(filteredTariffs, tariff)
		}

		if tariffList != nil {
			tariffList.Refresh()
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		statsLabel.SetText(fmt.Sprintf("üìä –í—Å–µ–≥–æ —Ç–∞—Ä–∏—Ñ–æ–≤: %d", len(tariffs)))
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
	tariffList = widget.NewList(
		func() int {
			return len(filteredTariffs)
		},
		func() fyne.CanvasObject {
			return container.NewHBox(
				widget.NewLabel("–ù–∞–∑–≤–∞–Ω–∏–µ"),
				widget.NewLabel("–¶–µ–Ω–∞"),
				widget.NewButton("–ò–∑–º–µ–Ω–∏—Ç—å", nil),
				widget.NewButton("–£–¥–∞–ª–∏—Ç—å", nil),
			)
		},
		func(id widget.ListItemID, item fyne.CanvasObject) {
			if id >= len(filteredTariffs) {
				return
			}
			tariff := filteredTariffs[id]

			hbox := item.(*fyne.Container)
			nameLabel := hbox.Objects[0].(*widget.Label)
			priceLabel := hbox.Objects[1].(*widget.Label)
			editBtn := hbox.Objects[2].(*widget.Button)
			deleteBtn := hbox.Objects[3].(*widget.Button)

			nameLabel.SetText(tariff.Name)
			priceLabel.SetText(fmt.Sprintf("%.2f ‚ÇΩ/–¥–µ–Ω—å", tariff.PricePerDay))

			editBtn.OnTapped = func() {
				a.showEditTariffDialogFixed(tariff)
			}

			deleteBtn.OnTapped = func() {
				dialog.ShowConfirm("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
					fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ '%s'?", tariff.Name),
					func(ok bool) {
						if ok {
							err := a.tariffService.DeleteTariff(tariff.ID)
							if err != nil {
								dialog.ShowError(err, a.window)
								return
							}
							updateTariffList()
							dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω", a.window)
						}
					},
					a.window)
			}
		},
	)

	// –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞
	searchEntry.OnChanged = func(text string) {
		updateTariffList()
	}

	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞")

	priceEntry := widget.NewEntry()
	priceEntry.SetPlaceHolder("–¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏")

	addForm := widget.NewForm(
		widget.NewFormItem("üí∞ –ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
		widget.NewFormItem("üíµ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", priceEntry),
	)

	addBtn := widget.NewButtonWithIcon("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", theme.ContentAddIcon(), func() {
		if nameEntry.Text == "" {
			dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
			return
		}

		price, err := strconv.ParseFloat(priceEntry.Text, 64)
		if err != nil {
			dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
			return
		}

		err = a.tariffService.CreateTariff(nameEntry.Text, price)
		if err != nil {
			dialog.ShowError(err, a.window)
			return
		}

		// –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
		nameEntry.SetText("")
		priceEntry.SetText("")
		updateTariffList()

		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ",
			fmt.Sprintf("–¢–∞—Ä–∏—Ñ '%s' –¥–æ–±–∞–≤–ª–µ–Ω", nameEntry.Text),
			a.window,
		)
	})
	addBtn.Importance = widget.HighImportance

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	refreshBtn := widget.NewButtonWithIcon("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", theme.ViewRefreshIcon(), func() {
		updateTariffList()
		dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
	})
	refreshBtn.Resize(fyne.NewSize(150, 40))

	// –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	updateTariffList()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
	listScroll := container.NewScroll(tariffList)
	listScroll.Resize(fyne.NewSize(1000, 400))

	content := container.NewBorder(
		container.NewVBox(
			searchEntry,
			widget.NewCard("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", "", container.NewVBox(addForm, addBtn)),
			container.NewHBox(refreshBtn, statsLabel),
			widget.NewSeparator(),
		),
		nil, nil, nil,
		listScroll,
	)

	return container.NewTabItem("üí∞ –¢–∞—Ä–∏—Ñ—ã", content)
}

// updateStats –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ú–ò —Ä–∞–∑–º–µ—Ä–∞–º–∏
func (a *StyledGuestApp) updateStats(label *widget.RichText) {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	now := time.Now()
	startOfMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.Local)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	bookings, err := a.bookingService.GetBookingsByDateRange(startOfMonth, endOfMonth)
	if err != nil {
		fyne.Do(func() {
			label.ParseMarkdown("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
		})
		return
	}

	totalBookings := len(bookings)
	var totalRevenue float64
	activeBookings := 0

	for _, booking := range bookings {
		if booking.Status != models.BookingStatusCancelled {
			totalRevenue += booking.TotalCost
			activeBookings++
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–º–∏–∫–∞–º
	cottages, _ := a.cottageService.GetAllCottages()
	freeCottages := 0
	occupiedCottages := 0
	for _, c := range cottages {
		if c.Status == "free" {
			freeCottages++
		} else if c.Status == "occupied" {
			occupiedCottages++
		}
	}

	avgCheck := 0.0
	if activeBookings > 0 {
		avgCheck = totalRevenue / float64(activeBookings)
	}

	statsText := fmt.Sprintf(`## üìä %s %d

**üè† –î–æ–º–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: %d
‚Ä¢ üü¢ –°–≤–æ–±–æ–¥–Ω–æ: %d  
‚Ä¢ üî¥ –ó–∞–Ω—è—Ç–æ: %d

**üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: %d
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: %d

**üí∞ –î–æ—Ö–æ–¥—ã:**
‚Ä¢ –û–±—â–∏–π: **%.0f ‚ÇΩ**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: **%.0f ‚ÇΩ**`,
		a.getMonthName(now.Month()), now.Year(),
		len(cottages), freeCottages, occupiedCottages,
		totalBookings, activeBookings,
		totalRevenue, avgCheck)

	fyne.Do(func() {
		label.ParseMarkdown(statsText)
		label.Resize(fyne.NewSize(260, 120)) // Updated width to match container
	})
}

// getMonthName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
func (a *StyledGuestApp) getMonthName(month time.Month) string {
	months := []string{
		"", "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
		"–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
	}
	return months[month]
}

func (a *StyledGuestApp) generateOccupancyReport() {
	dialog.ShowInformation("üîß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *StyledGuestApp) generateRevenueReport() {
	dialog.ShowInformation("üîß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *StyledGuestApp) showUpcomingArrivals() {
	bookings, err := a.bookingService.GetUpcomingBookings()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(bookings) == 0 {
		dialog.ShowInformation("üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–µ–∑–¥–æ–≤", a.window)
		return
	}

	content := container.NewVBox()
	for _, booking := range bookings {
		cottageName := ""
		for _, c := range a.cottages {
			if c.ID == booking.CottageID {
				cottageName = c.Name
				break
			}
		}

		// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
		card := widget.NewCard(
			fmt.Sprintf("üë§ %s ‚Ä¢ üè† %s", booking.GuestName, cottageName),
			fmt.Sprintf("üìÖ –ó–∞–µ–∑–¥: %s", booking.CheckInDate.Format("02.01.2006")),
			container.NewVBox(
				widget.NewLabel(fmt.Sprintf("üìû %s", booking.Phone)),
				widget.NewLabel(fmt.Sprintf("üí∞ %.0f ‚ÇΩ", booking.TotalCost)),
			),
		)
		content.Add(card)
	}

	scroll := container.NewScroll(content)
	scroll.Resize(fyne.NewSize(500, 400))

	d := dialog.NewCustom("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", "–ó–∞–∫—Ä—ã—Ç—å", scroll, a.window)
	d.Resize(fyne.NewSize(600, 500))
	d.Show()
}

// showQuickBookingDialog –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –±—ã—Å—Ç—Ä–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
func (a *StyledGuestApp) showQuickBookingDialogFromSidePanel() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤
	cottages, err := a.cottageService.GetFreeCottages()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(cottages) == 0 {
		dialog.ShowInformation("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤", a.window)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	tariffs, err := a.tariffService.GetTariffs()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
	nameEntry := ui.StyledEntry("–§–ò–û –≥–æ—Å—Ç—è")
	phoneEntry := ui.StyledEntry("+7 (999) 123-45-67")
	emailEntry := ui.StyledEntry("email@example.com")

	cottageOptions := make([]string, len(cottages))
	for i, c := range cottages {
		cottageOptions[i] = fmt.Sprintf("üè† %s", c.Name)
	}
	cottageSelect := widget.NewSelect(cottageOptions, nil)

	tariffOptions := make([]string, len(tariffs))
	for i, t := range tariffs {
		tariffOptions[i] = fmt.Sprintf("üí∞ %s - %.0f ‚ÇΩ/—Å—É—Ç–∫–∏", t.Name, t.PricePerDay)
	}
	tariffSelect := widget.NewSelect(tariffOptions, nil)

	// –î–∞—Ç—ã
	checkInDate := time.Now().Add(24 * time.Hour)
	checkOutDate := checkInDate.Add(24 * time.Hour)

	checkInPicker := ui.NewDatePickerButton("üìÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkInDate = t
	})
	checkInPicker.SetSelectedDate(checkInDate)

	checkOutPicker := ui.NewDatePickerButton("üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkOutDate = t
	})
	checkOutPicker.SetSelectedDate(checkOutDate)

	notesEntry := widget.NewMultiLineEntry()
	notesEntry.SetPlaceHolder("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è...")
	notesEntry.SetMinRowsVisible(3)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üë§ –§–ò–û –≥–æ—Å—Ç—è", Widget: nameEntry},
			{Text: "üìû –¢–µ–ª–µ—Ñ–æ–Ω", Widget: phoneEntry},
			{Text: "üìß Email", Widget: emailEntry},
			{Text: "üè† –î–æ–º–∏–∫", Widget: cottageSelect},
			{Text: "üí∞ –¢–∞—Ä–∏—Ñ", Widget: tariffSelect},
			{Text: "üìÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", Widget: checkInPicker},
			{Text: "üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", Widget: checkOutPicker},
			{Text: "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", Widget: notesEntry},
		},
		OnSubmit: func() {
			// –í–∞–ª–∏–¥–∞—Ü–∏—è
			if nameEntry.Text == "" || phoneEntry.Text == "" ||
				cottageSelect.SelectedIndex() < 0 || tariffSelect.SelectedIndex() < 0 {
				dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"), a.window)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
			booking := models.Booking{
				CottageID:    cottages[cottageSelect.SelectedIndex()].ID,
				GuestName:    nameEntry.Text,
				Phone:        phoneEntry.Text,
				Email:        emailEntry.Text,
				CheckInDate:  checkInPicker.GetSelectedDate(),
				CheckOutDate: checkOutPicker.GetSelectedDate(),
				TariffID:     tariffs[tariffSelect.SelectedIndex()].ID,
				Notes:        notesEntry.Text,
			}

			_, err := a.bookingService.CreateBooking(booking)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			a.calendarWidget.Update()
			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", a.window)
		},
		OnCancel: func() {},
	}

	d := dialog.NewCustom("‚ú® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 600))
	d.Show()
}

// showEditCottageDialogFixed –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∏–∫–∞ (–£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
func (a *StyledGuestApp) showEditCottageDialogFixed(cottage models.Cottage) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(cottage.Name)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üÜî ID", Widget: widget.NewLabel(fmt.Sprintf("%d", cottage.ID))},
			{Text: "üè† –ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "üìä –°—Ç–∞—Ç—É—Å", Widget: widget.NewLabel(cottage.Status)},
		},
		OnSubmit: func() {
			err := a.cottageService.UpdateCottageName(cottage.ID, nameEntry.Text)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}
			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
			a.calendarWidget.Update()
		},
	}

	d := dialog.NewCustom("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–∫", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

// showEditTariffDialogFixed –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ (–£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)
func (a *StyledGuestApp) showEditTariffDialogFixed(tariff models.Tariff) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(tariff.Name)

	priceEntry := widget.NewEntry()
	priceEntry.SetText(fmt.Sprintf("%.2f", tariff.PricePerDay))

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üí∞ –ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "üíµ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", Widget: priceEntry},
		},
		OnSubmit: func() {
			if nameEntry.Text == "" {
				dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
				return
			}

			price, err := strconv.ParseFloat(priceEntry.Text, 64)
			if err != nil {
				dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
				return
			}

			err = a.tariffService.UpdateTariff(tariff.ID, nameEntry.Text, price)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 400))
	d.Show()
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
func lerpColor(start, end color.Color, t float32) color.Color {
	r1, g1, b1, a1 := start.RGBA()
	r2, g2, b2, a2 := end.RGBA()

	return color.NRGBA{
		R: uint8(float32(r1>>8)*(1-t) + float32(r2>>8)*t),
		G: uint8(float32(g1>>8)*(1-t) + float32(g2>>8)*t),
		B: uint8(float32(b1>>8)*(1-t) + float32(b2>>8)*t),
		A: uint8(float32(a1>>8)*(1-t) + float32(a2>>8)*t),
	}
}

func (a *StyledGuestApp) showQuickBookingDialog() {
	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤
	cottages, err := a.cottageService.GetFreeCottages()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(cottages) == 0 {
		dialog.ShowInformation("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–æ–º–∏–∫–æ–≤", a.window)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
	tariffs, err := a.tariffService.GetTariffs()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É
	nameEntry := ui.StyledEntry("–§–ò–û –≥–æ—Å—Ç—è")
	phoneEntry := ui.StyledEntry("+7 (999) 123-45-67")
	emailEntry := ui.StyledEntry("email@example.com")

	cottageOptions := make([]string, len(cottages))
	for i, c := range cottages {
		cottageOptions[i] = fmt.Sprintf("üè† %s", c.Name)
	}
	cottageSelect := widget.NewSelect(cottageOptions, nil)

	tariffOptions := make([]string, len(tariffs))
	for i, t := range tariffs {
		tariffOptions[i] = fmt.Sprintf("üí∞ %s - %.0f ‚ÇΩ/—Å—É—Ç–∫–∏", t.Name, t.PricePerDay)
	}
	tariffSelect := widget.NewSelect(tariffOptions, nil)

	// –î–∞—Ç—ã
	checkInDate := time.Now().Add(24 * time.Hour)
	checkOutDate := checkInDate.Add(24 * time.Hour)

	checkInPicker := ui.NewDatePickerButton("üìÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkInDate = t
	})
	checkInPicker.SetSelectedDate(checkInDate)

	checkOutPicker := ui.NewDatePickerButton("üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", a.window, func(t time.Time) {
		checkOutDate = t
	})
	checkOutPicker.SetSelectedDate(checkOutDate)

	notesEntry := widget.NewMultiLineEntry()
	notesEntry.SetPlaceHolder("üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è...")
	notesEntry.SetMinRowsVisible(3)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üë§ –§–ò–û –≥–æ—Å—Ç—è", Widget: nameEntry},
			{Text: "üìû –¢–µ–ª–µ—Ñ–æ–Ω", Widget: phoneEntry},
			{Text: "üìß Email", Widget: emailEntry},
			{Text: "üè† –î–æ–º–∏–∫", Widget: cottageSelect},
			{Text: "üí∞ –¢–∞—Ä–∏—Ñ", Widget: tariffSelect},
			{Text: "üìÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞", Widget: checkInPicker},
			{Text: "üìÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞", Widget: checkOutPicker},
			{Text: "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", Widget: notesEntry},
		},
		OnSubmit: func() {
			// –í–∞–ª–∏–¥–∞—Ü–∏—è
			if nameEntry.Text == "" || phoneEntry.Text == "" ||
				cottageSelect.SelectedIndex() < 0 || tariffSelect.SelectedIndex() < 0 {
				dialog.ShowError(fmt.Errorf("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è"), a.window)
				return
			}

			// –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
			booking := models.Booking{
				CottageID:    cottages[cottageSelect.SelectedIndex()].ID,
				GuestName:    nameEntry.Text,
				Phone:        phoneEntry.Text,
				Email:        emailEntry.Text,
				CheckInDate:  checkInPicker.GetSelectedDate(),
				CheckOutDate: checkOutPicker.GetSelectedDate(),
				TariffID:     tariffs[tariffSelect.SelectedIndex()].ID,
				Notes:        notesEntry.Text,
			}

			_, err := a.bookingService.CreateBooking(booking)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			a.calendarWidget.Update()
			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", a.window)
		},
		OnCancel: func() {},
	}

	d := dialog.NewCustom("‚ú® –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 600))
	d.Show()
}

// showEditCottageDialog - –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–∏–∫–∞
func (a *StyledGuestApp) showEditCottageDialog(cottage models.Cottage) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(cottage.Name)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üÜî ID", Widget: widget.NewLabel(fmt.Sprintf("%d", cottage.ID))},
			{Text: "üè† –ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "üìä –°—Ç–∞—Ç—É—Å", Widget: widget.NewLabel(cottage.Status)},
		},
		OnSubmit: func() {
			err := a.cottageService.UpdateCottageName(cottage.ID, nameEntry.Text)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}
			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
			a.calendarWidget.Update()
		},
	}

	d := dialog.NewCustom("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–∫", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

// showEditTariffDialog - –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
func (a *StyledGuestApp) showEditTariffDialog(tariff models.Tariff) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(tariff.Name)

	priceEntry := widget.NewEntry()
	priceEntry.SetText(fmt.Sprintf("%.2f", tariff.PricePerDay))

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "üí∞ –ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "üíµ –¶–µ–Ω–∞ –∑–∞ —Å—É—Ç–∫–∏", Widget: priceEntry},
		},
		OnSubmit: func() {
			if nameEntry.Text == "" {
				dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"), a.window)
				return
			}

			price, err := strconv.ParseFloat(priceEntry.Text, 64)
			if err != nil {
				dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
				return
			}

			err = a.tariffService.UpdateTariff(tariff.ID, nameEntry.Text, price)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			dialog.ShowInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Resize(fyne.NewSize(500, 400))
	d.Show()
}
