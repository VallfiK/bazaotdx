// internal/app/app.go - –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–º—ã
package app

import (
	"fmt"
	"log"
	"strconv"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/service"
	"github.com/VallfIK/bazaotdx/internal/ui"
)

type GuestApp struct {
	fyneApp               fyne.App // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è Fyne –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	window                fyne.Window
	guestService          *service.GuestService
	cottageService        *service.CottageService
	tariffService         *service.TariffService
	bookingService        *service.BookingService
	updateCottagesContent func()
	cottages              []models.Cottage

	// UI –≤–∏–¥–∂–µ—Ç—ã
	calendarWidget    *ui.BookingCalendar
	bookingListWidget *ui.BookingListWidget
}

func NewGuestApp(
	guestService *service.GuestService,
	cottageService *service.CottageService,
	tariffService *service.TariffService,
	bookingService *service.BookingService,
) *GuestApp {
	// –°–æ–∑–¥–∞–µ–º Fyne –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó —Ç–µ–º—ã (—Ç–µ–º–∞ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ main.go)
	a := app.New()
	w := a.NewWindow("üèïÔ∏è –ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
	w.Resize(fyne.NewSize(1400, 900))
	w.CenterOnScreen()

	app := &GuestApp{
		fyneApp:        a,
		window:         w,
		guestService:   guestService,
		cottageService: cottageService,
		tariffService:  tariffService,
		bookingService: bookingService,
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–∏–∫–∏
	var err error
	app.cottages, err = app.cottageService.GetAllCottages()
	if err != nil {
		log.Printf("Error loading cottages: %v", err)
	}

	return app
}

// SetFyneApp –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ç–æ–≤–æ–µ Fyne –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–µ–º–æ–π
func (a *GuestApp) SetFyneApp(fyneApp fyne.App) {
	a.fyneApp = fyneApp
	// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –Ω–æ–≤—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
	a.window = fyneApp.NewWindow("üèïÔ∏è –ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
	a.window.Resize(fyne.NewSize(1400, 900))
	a.window.CenterOnScreen()
}

func (a *GuestApp) Run() {
	a.createStyledUI()
	a.window.ShowAndRun()
}

// createStyledUI —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–π —Ç–µ–º—ã
func (a *GuestApp) createStyledUI() {
	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	statsContainer := a.createStatsContainer()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥–∂–µ—Ç
	a.calendarWidget = ui.NewBookingCalendar(
		a.bookingService,
		a.cottageService,
		a.tariffService,
		a.window,
	)

	// –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
	a.bookingListWidget = ui.NewBookingListWidget(
		a.bookingService,
		a.cottageService,
		a.window,
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∑–∞–∏–º–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	a.calendarWidget.SetOnRefresh(func() {
		a.bookingListWidget.Refresh()
	})

	a.bookingListWidget.SetOnRefresh(func() {
		a.calendarWidget.Update()
	})

	// –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª—å—é
	mainSplit := container.NewHSplit(a.calendarWidget, a.bookingListWidget)
	mainSplit.SetOffset(0.7) // 70% –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è

	// –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π
	tabs := container.NewAppTabs(
		container.NewTabItemWithIcon("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", theme.ViewFullScreenIcon(),
			container.NewVBox(statsContainer, mainSplit)),
		container.NewTabItemWithIcon("–¢–∞—Ä–∏—Ñ—ã", theme.SettingsIcon(),
			a.createStyledTariffsTab()),
		container.NewTabItemWithIcon("–î–æ–º–∏–∫–∏", theme.HomeIcon(),
			a.createStyledCottagesTab()),
		container.NewTabItemWithIcon("–û—Ç—á–µ—Ç—ã", theme.DocumentIcon(),
			a.createStyledReportsTab()),
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞
	a.window.SetContent(tabs)
}

// createStatsContainer —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
func (a *GuestApp) createStatsContainer() *fyne.Container {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := a.calculateStats()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	totalCard := ui.CreateStatsCard("–í—Å–µ–≥–æ –¥–æ–º–∏–∫–æ–≤", fmt.Sprintf("%d", stats.TotalCottages), "–≤ —Å–∏—Å—Ç–µ–º–µ")
	occupiedCard := ui.CreateStatsCard("–ó–∞–Ω—è—Ç–æ", fmt.Sprintf("%d", stats.OccupiedCottages), "—Å–µ–≥–æ–¥–Ω—è")
	upcomingCard := ui.CreateStatsCard("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ", fmt.Sprintf("%d", stats.UpcomingBookings), "–∑–∞–µ–∑–¥—ã")
	revenueCard := ui.CreateStatsCard("–î–æ—Ö–æ–¥", fmt.Sprintf("‚ÇΩ %.0f", stats.MonthlyRevenue), "–∑–∞ –º–µ—Å—è—Ü")

	return container.NewGridWithColumns(4, totalCard, occupiedCard, upcomingCard, revenueCard)
}

// Stats —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
type Stats struct {
	TotalCottages    int
	OccupiedCottages int
	UpcomingBookings int
	MonthlyRevenue   float64
}

// calculateStats –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (a *GuestApp) calculateStats() Stats {
	stats := Stats{}

	// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–∏–∫–æ–≤
	cottages, err := a.cottageService.GetAllCottages()
	if err == nil {
		stats.TotalCottages = len(cottages)
		for _, cottage := range cottages {
			if cottage.Status == "occupied" {
				stats.OccupiedCottages++
			}
		}
	}

	// –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	upcomingBookings, err := a.bookingService.GetUpcomingBookings()
	if err == nil {
		stats.UpcomingBookings = len(upcomingBookings)
	}

	// –î–æ—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü
	now := time.Now()
	startOfMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.Local)
	endOfMonth := startOfMonth.AddDate(0, 1, -1)

	bookings, err := a.bookingService.GetBookingsByDateRange(startOfMonth, endOfMonth)
	if err == nil {
		for _, booking := range bookings {
			if booking.Status != models.BookingStatusCancelled {
				stats.MonthlyRevenue += booking.TotalCost
			}
		}
	}

	return stats
}

// createStyledTariffsTab —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
func (a *GuestApp) createStyledTariffsTab() *fyne.Container {
	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞")

	priceEntry := widget.NewEntry()
	priceEntry.SetPlaceHolder("–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å")

	// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞
	addForm := ui.CreateStyledCard("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ", "",
		container.NewVBox(
			widget.NewForm(
				widget.NewFormItem("–ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
				widget.NewFormItem("–¶–µ–Ω–∞ (—Ä—É–±./–¥–µ–Ω—å)", priceEntry),
			),
			ui.NewPrimaryButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", func() {
				a.handleAddTariff(nameEntry.Text, priceEntry.Text, nameEntry, priceEntry)
			}),
		),
	)

	// –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
	tariffsList := a.createStyledTariffsList()

	return container.NewVBox(
		addForm,
		widget.NewSeparator(),
		tariffsList,
	)
}

// createStyledTariffsList —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
func (a *GuestApp) createStyledTariffsList() *fyne.Container {
	tariffs, err := a.tariffService.GetTariffs()
	if err != nil {
		return container.NewVBox(widget.NewLabel("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤"))
	}

	tariffsContainer := container.NewVBox()

	for _, tariff := range tariffs {
		tariffCard := a.createTariffCard(tariff)
		tariffsContainer.Add(tariffCard)
	}

	return container.NewScroll(tariffsContainer)
}

// createTariffCard —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ç–∞—Ä–∏—Ñ–∞
func (a *GuestApp) createTariffCard(tariff models.Tariff) *fyne.Container {
	// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	content := container.NewHBox(
		widget.NewLabel(tariff.Name),
		widget.NewLabel(fmt.Sprintf("%.2f —Ä—É–±./–¥–µ–Ω—å", tariff.PricePerDay)),
		ui.NewSecondaryButton("–ò–∑–º–µ–Ω–∏—Ç—å", func() {
			a.showEditTariffDialog(tariff)
		}),
		ui.NewSecondaryButton("–£–¥–∞–ª–∏—Ç—å", func() {
			a.showDeleteTariffConfirm(tariff)
		}),
	)

	return ui.CreateStyledCard("", "", content)
}

// createStyledCottagesTab —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–æ–º–∏–∫–æ–≤
func (a *GuestApp) createStyledCottagesTab() *fyne.Container {
	// –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∏–∫–∞
	nameEntry := widget.NewEntry()
	nameEntry.SetPlaceHolder("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞")

	addForm := ui.CreateStyledCard("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–º–∏–∫", "",
		container.NewVBox(
			widget.NewForm(
				widget.NewFormItem("–ù–∞–∑–≤–∞–Ω–∏–µ", nameEntry),
			),
			ui.NewPrimaryButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∏–∫", func() {
				a.handleAddCottage(nameEntry.Text, nameEntry)
			}),
		),
	)

	// –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")

	statusFilter := widget.NewSelect([]string{"–í—Å–µ", "–°–≤–æ–±–æ–¥–Ω—ã–µ", "–ó–∞–Ω—è—Ç—ã–µ"}, nil)
	statusFilter.SetSelected("–í—Å–µ")

	filtersContainer := ui.CreateStyledCard("–§–∏–ª—å—Ç—Ä—ã", "",
		container.NewHBox(
			widget.NewLabel("–°—Ç–∞—Ç—É—Å:"),
			statusFilter,
			widget.NewLabel("–ü–æ–∏—Å–∫:"),
			searchEntry,
		),
	)

	// –°–ø–∏—Å–æ–∫ –¥–æ–º–∏–∫–æ–≤
	cottagesList := a.createStyledCottagesList()

	return container.NewVBox(
		addForm,
		filtersContainer,
		widget.NewSeparator(),
		cottagesList,
	)
}

// createStyledCottagesList —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–∏–∫–æ–≤
func (a *GuestApp) createStyledCottagesList() *fyne.Container {
	cottages, err := a.cottageService.GetAllCottages()
	if err != nil {
		return container.NewVBox(widget.NewLabel("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–∏–∫–æ–≤"))
	}

	cottagesContainer := container.NewVBox()

	for _, cottage := range cottages {
		cottageCard := a.createCottageCard(cottage)
		cottagesContainer.Add(cottageCard)
	}

	return container.NewScroll(cottagesContainer)
}

// createCottageCard —Å–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–æ–º–∏–∫–∞
func (a *GuestApp) createCottageCard(cottage models.Cottage) *fyne.Container {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
	statusText := "–°–≤–æ–±–æ–¥–µ–Ω"
	statusColor := ui.SuccessColor
	if cottage.Status == "occupied" {
		statusText = "–ó–∞–Ω—è—Ç"
		statusColor = ui.WarmBrown
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
	statusIndicator := ui.CreateStatusIndicator(cottage.Status)

	// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	content := container.NewHBox(
		container.NewHBox(
			statusIndicator,
			widget.NewLabel(fmt.Sprintf("%d. %s", cottage.ID, cottage.Name)),
		),
		widget.NewLabel(statusText),
		ui.NewSecondaryButton("–ò–∑–º–µ–Ω–∏—Ç—å", func() {
			a.showEditCottageDialog(cottage)
		}),
		ui.NewSecondaryButton("–£–¥–∞–ª–∏—Ç—å", func() {
			a.showDeleteCottageConfirm(cottage)
		}),
	)

	return ui.CreateStyledCard("", "", content)
}

// createStyledReportsTab —Å–æ–∑–¥–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É –æ—Ç—á–µ—Ç–æ–≤
func (a *GuestApp) createStyledReportsTab() *fyne.Container {
	// –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç—á–µ—Ç—ã
	quickReports := ui.CreateStyledCard("–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç—á–µ—Ç—ã", "",
		container.NewVBox(
			ui.NewPrimaryButton("üìä –û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏", func() {
				a.generateOccupancyReport()
			}),
			ui.NewPrimaryButton("üí∞ –û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö", func() {
				a.generateRevenueReport()
			}),
			ui.NewPrimaryButton("üë• –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", func() {
				a.showUpcomingArrivals()
			}),
		),
	)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	statsCard := ui.CreateStyledCard("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "", a.createDetailedStats())

	return container.NewVBox(
		quickReports,
		statsCard,
	)
}

// createDetailedStats —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (a *GuestApp) createDetailedStats() *fyne.Container {
	stats := a.calculateStats()

	return container.NewVBox(
		widget.NewLabel(fmt.Sprintf("–í—Å–µ–≥–æ –¥–æ–º–∏–∫–æ–≤: %d", stats.TotalCottages)),
		widget.NewLabel(fmt.Sprintf("–ó–∞–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: %d", stats.OccupiedCottages)),
		widget.NewLabel(fmt.Sprintf("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã: %d", stats.UpcomingBookings)),
		widget.NewLabel(fmt.Sprintf("–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: %.2f —Ä—É–±.", stats.MonthlyRevenue)),
	)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
func (a *GuestApp) handleAddTariff(name, priceStr string, nameEntry, priceEntry *widget.Entry) {
	if name == "" || priceStr == "" {
		dialog.ShowError(fmt.Errorf("–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"), a.window)
		return
	}

	price, err := strconv.ParseFloat(priceStr, 64)
	if err != nil || price <= 0 {
		dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
		return
	}

	err = a.tariffService.CreateTariff(name, price)
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	nameEntry.SetText("")
	priceEntry.SetText("")
	dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —Å–æ–∑–¥–∞–Ω", a.window)
}

func (a *GuestApp) handleAddCottage(name string, nameEntry *widget.Entry) {
	if name == "" {
		dialog.ShowError(fmt.Errorf("–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∏–∫–∞"), a.window)
		return
	}

	err := a.cottageService.AddCottage(name)
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	nameEntry.SetText("")
	if a.calendarWidget != nil {
		a.calendarWidget.Update()
	}
	dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω", a.window)
}

func (a *GuestApp) showEditTariffDialog(tariff models.Tariff) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(tariff.Name)

	priceEntry := widget.NewEntry()
	priceEntry.SetText(fmt.Sprintf("%.2f", tariff.PricePerDay))

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–¶–µ–Ω–∞ (—Ä—É–±./–¥–µ–Ω—å)", Widget: priceEntry},
		},
		OnSubmit: func() {
			price, err := strconv.ParseFloat(priceEntry.Text, 64)
			if err != nil || price <= 0 {
				dialog.ShowError(fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã"), a.window)
				return
			}

			err = a.tariffService.UpdateTariff(tariff.ID, nameEntry.Text, price)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

func (a *GuestApp) showDeleteTariffConfirm(tariff models.Tariff) {
	dialog.ShowConfirm("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞",
		fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ '%s'?", tariff.Name),
		func(confirmed bool) {
			if confirmed {
				err := a.tariffService.DeleteTariff(tariff.ID)
				if err != nil {
					dialog.ShowError(err, a.window)
					return
				}
				dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–¢–∞—Ä–∏—Ñ —É–¥–∞–ª–µ–Ω", a.window)
			}
		}, a.window)
}

func (a *GuestApp) showEditCottageDialog(cottage models.Cottage) {
	nameEntry := widget.NewEntry()
	nameEntry.SetText(cottage.Name)

	form := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "ID", Widget: widget.NewLabel(fmt.Sprintf("%d", cottage.ID))},
			{Text: "–ù–∞–∑–≤–∞–Ω–∏–µ", Widget: nameEntry},
			{Text: "–°—Ç–∞—Ç—É—Å", Widget: widget.NewLabel(cottage.Status)},
		},
		OnSubmit: func() {
			if nameEntry.Text == "" {
				dialog.ShowError(fmt.Errorf("–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"), a.window)
				return
			}

			err := a.cottageService.UpdateCottageName(cottage.ID, nameEntry.Text)
			if err != nil {
				dialog.ShowError(err, a.window)
				return
			}

			if a.calendarWidget != nil {
				a.calendarWidget.Update()
			}
			dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω", a.window)
		},
	}

	d := dialog.NewCustom("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–∏–∫", "–û—Ç–º–µ–Ω–∞", form, a.window)
	d.Show()
}

func (a *GuestApp) showDeleteCottageConfirm(cottage models.Cottage) {
	if cottage.Status == "occupied" {
		dialog.ShowError(fmt.Errorf("–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç—ã–π –¥–æ–º–∏–∫"), a.window)
		return
	}

	dialog.ShowConfirm("–£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∏–∫–∞",
		fmt.Sprintf("–£–¥–∞–ª–∏—Ç—å –¥–æ–º–∏–∫ '%s'?", cottage.Name),
		func(confirmed bool) {
			if confirmed {
				err := a.cottageService.DeleteCottage(cottage.ID)
				if err != nil {
					dialog.ShowError(err, a.window)
					return
				}

				if a.calendarWidget != nil {
					a.calendarWidget.Update()
				}
				dialog.ShowInformation("–£—Å–ø–µ—à–Ω–æ", "–î–æ–º–∏–∫ —É–¥–∞–ª–µ–Ω", a.window)
			}
		}, a.window)
}

func (a *GuestApp) generateOccupancyReport() {
	dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –æ –∑–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *GuestApp) generateRevenueReport() {
	dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –æ –¥–æ—Ö–æ–¥–∞—Ö –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏", a.window)
}

func (a *GuestApp) showUpcomingArrivals() {
	bookings, err := a.bookingService.GetUpcomingBookings()
	if err != nil {
		dialog.ShowError(err, a.window)
		return
	}

	if len(bookings) == 0 {
		dialog.ShowInformation("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–µ–∑–¥–æ–≤", a.window)
		return
	}

	content := container.NewVBox()
	for _, booking := range bookings {
		cottageName := ""
		for _, c := range a.cottages {
			if c.ID == booking.CottageID {
				cottageName = c.Name
				break
			}
		}

		bookingCard := ui.CreateStyledCard(
			fmt.Sprintf("%s - %s", booking.GuestName, cottageName),
			fmt.Sprintf("–ó–∞–µ–∑–¥: %s", booking.CheckInDate.Format("02.01.2006")),
			widget.NewLabel(fmt.Sprintf("–¢–µ–ª–µ—Ñ–æ–Ω: %s", booking.Phone)),
		)
		content.Add(bookingCard)
	}

	scroll := container.NewScroll(content)
	scroll.SetMinSize(fyne.NewSize(500, 400))

	d := dialog.NewCustom("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–µ–∑–¥—ã", "–ó–∞–∫—Ä—ã—Ç—å", scroll, a.window)
	d.Resize(fyne.NewSize(600, 500))
	d.Show()
}
