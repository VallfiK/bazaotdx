// cmd/main.go
package main

import (
	"database/sql"
	"io"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/VallfIK/bazaotdx/internal/app"
	"github.com/VallfIK/bazaotdx/internal/db"
	"github.com/VallfIK/bazaotdx/internal/models"
	"github.com/VallfIK/bazaotdx/internal/service"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	logFile, err := os.OpenFile("app.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
	}
	defer logFile.Close()

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
	multiWriter := io.MultiWriter(os.Stdout, logFile)
	log.SetOutput(multiWriter)

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –õ–µ—Å–Ω–æ–π –ë–∞–∑—ã –û—Ç–¥—ã—Ö–∞")
	log.Printf("üõ†Ô∏è –í–µ—Ä—Å–∏—è: 2.0 (–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)")
	log.Printf("üé® –¢–µ–º–∞: –õ–µ—Å–Ω–∞—è (–∑–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏, –º–æ–ª–æ—á–Ω—ã–π, –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	projectPath := "C:\\Users\\VallfIK\\Documents\\GitHub\\bazaotdx"
	imagesPath := filepath.Join(projectPath, "images")
	log.Printf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ images: %s", imagesPath)

	images := []string{
		"free.png",
		"booked.png",
		"bought.png",
		"freefirst.png",
		"bookedfirst.png",
		"boughtfirst.png",
		"bookedlast.png",
		"boughtlast.png",
	}

	for _, img := range images {
		imgPath := filepath.Join(imagesPath, img)
		if _, err := os.Stat(imgPath); err != nil {
			log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", imgPath)
			// –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			createMissingImage(imgPath)
		} else {
			log.Printf("‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: %s", imgPath)
		}
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
	database, err := db.NewPostgresDB()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	} else {
		log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
	}
	defer database.Close()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	documentsRoot := "documents"

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
	guestService := service.NewGuestService(database.DB, documentsRoot)
	cottageService := service.NewCottageService(database.DB)
	tariffService := service.NewTariffService(database.DB)
	bookingService := service.NewBookingService(database.DB)

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	app := app.NewStyledGuestApp(guestService, cottageService, tariffService, bookingService)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
	go backgroundTasks(database.DB, bookingService)

	log.Println("üå≤ –ó–∞–ø—É—Å–∫ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

	// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	app.Run()
}

// createMissingImage —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
func createMissingImage(path string) {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	dir := filepath.Dir(path)
	os.MkdirAll(dir, 0755)

	// –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
	file, err := os.Create(path)
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É: %v", err)
		return
	}
	file.Close()
	log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞: %s", path)
}

// backgroundTasks –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
func backgroundTasks(db *sql.DB, bookingService *service.BookingService) {
	log.Println("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")

	for {
		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
		_, err := db.Exec(`
			DELETE FROM lesbaza.bookings 
			WHERE status IN ($1, $2) AND created_at <= NOW() - INTERVAL '30 days'
		`, models.BookingStatusCancelled, models.BookingStatusCompleted)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–æ–Ω–µ–π: %v", err)
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π
		_, err = db.Exec(`
			DELETE FROM lesbaza.guests 
			WHERE check_out_date <= NOW() - INTERVAL '2 hours'
		`)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—ã—Å–µ–ª–µ–Ω–∏—è: %v", err)
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
		rows, err := db.Query(`
			SELECT booking_id 
			FROM lesbaza.bookings 
			WHERE status = $1 
			AND check_in_date::date = CURRENT_DATE
			AND CURRENT_TIME > TIME '14:00'`,
			models.BookingStatusBooked,
		)
		if err == nil {
			var bookingIDs []int
			for rows.Next() {
				var id int
				if rows.Scan(&id) == nil {
					bookingIDs = append(bookingIDs, id)
				}
			}
			rows.Close()

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
			for _, id := range bookingIDs {
				err := bookingService.CheckInBooking(id)
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞—Å–µ–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏ %d: %v", id, err)
				} else {
					log.Printf("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å–µ–ª–µ–Ω–∞ –±—Ä–æ–Ω—å %d", id)
				}
			}
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
		rows, err = db.Query(`
			SELECT booking_id 
			FROM lesbaza.bookings 
			WHERE status = $1 
			AND check_out_date::date < CURRENT_DATE`,
			models.BookingStatusCheckedIn,
		)
		if err == nil {
			var bookingIDs []int
			for rows.Next() {
				var id int
				if rows.Scan(&id) == nil {
					bookingIDs = append(bookingIDs, id)
				}
			}
			rows.Close()

			// –í—ã—Å–µ–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏
			for _, id := range bookingIDs {
				err := bookingService.CheckOutBooking(id)
				if err != nil {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—ã—Å–µ–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏ %d: %v", id, err)
				} else {
					log.Printf("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–µ–ª–µ–Ω–∞ –±—Ä–æ–Ω—å %d", id)
				}
			}
		}

		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
		time.Sleep(1 * time.Hour)
	}
}
